#!/usr/bin/env python

import chardet
import sys
import argparse

def param_setting():
    parser = argparse.ArgumentParser(description='detect and convert text encodings')
    parser.add_argument('-d', '--detect-only', action="store_true", help='detect the encoding of input end exit')
    parser.add_argument('-i', '--input', metavar='FILE', help='read from input file, if not given, use stdin by default')
    parser.add_argument('-o', '--output', metavar='FILE', help='write to output file, if not given, use stdout by default')
    parser.add_argument('-f', '--from', dest='decode_from', metavar='ENCODING', help='the encoding that convert from, if not given, auto detect by default')
    parser.add_argument('-t', '--to', dest='encode_to', default='UTF-8', metavar='ENCODING', help='the encoding that convert to, if not given, UTF-8 by default')
    parser.add_argument('-a', '--auto-detect', action="store_true", help='auto detect encoding of input')
    return parser

def main():

    input_file = sys.stdin
    input_file_name = None
    output_file = sys.stdout
    output_file_name = None

    parser = param_setting()
    args = parser.parse_args()
    
    input_file_name = args.input
    if input_file_name is not None:
        input_file = open(input_file_name)
    content = input_file.read()

    print content

    decect_result = chardet.detect(content)

    if args.detect_only:
        if input_file_name:
            decect_result['file'] = input_file_name
        print decect_result
        return

    if args.decode_from is None:
        args.auto_detect = True

    if args.auto_detect:
        args.decode_from = decect_result['encoding']

    result = content.decode(args.decode_from).encode(args.encode_to)
    
    output_file_name = args.output
    if output_file_name is not None:
        output_file = open(output_file_name, 'w')
    output_file.write(result)

    print >> sys.stderr, "input:%s, output:%s, from:%s, to:%s" %(input_file_name, output_file_name, args.decode_from, args.encode_to)

    output_file.close()
    input_file.close()

if __name__ == '__main__':
    main()
